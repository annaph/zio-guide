package org.zio.guide.essentials.first.steps.exercises

import org.zio.guide.essentials.first.steps.exercises.Implicits.StringOps
import zio.{Console, Scope, Task, ZIO, ZIOAppArgs, ZIOAppDefault}

import java.io.{File, PrintWriter}
import scala.io.Source

object FileOps {

  def copyFile(source: String, dest: String): Task[Unit] =
    for {
      content <- readFile(source)
      _ <- writeFile(dest, content)
    } yield ()

  def readFile(file: String): Task[String] = ZIO.attempt {
    val source = Source.fromResource(file)

    try source.getLines().mkString("\n")
    finally source.close()
  }

  def writeFile(file: String, text: String): Task[Unit] = ZIO.attempt {
    val writer = new PrintWriter(new File(file))

    try writer.write(text)
    finally writer.close()
  }

}

object ReadFileApp extends ZIOAppDefault {

  override def run: ZIO[Any with ZIOAppArgs with Scope, Throwable, Unit] =
    FileOps
      .readFile(file = "file.txt")
      .map(_.withGreenBackground)
      .flatMap(Console.printLine(_))

}

object WriteFileApp extends ZIOAppDefault {

  private val text =
    s""" This is some file
       | generated by
       | FileOps#writeFile !
       |""".stripMargin

  override def run: ZIO[Any with ZIOAppArgs with Scope, Throwable, Unit] =
    FileOps.writeFile(file = "file2.txt", text)

}

object CopyFileApp extends ZIOAppDefault {

  override def run: ZIO[Any with ZIOAppArgs with Scope, Throwable, Unit] =
    FileOps.copyFile(source = "file.txt", dest = "file-copy.txt")

}
